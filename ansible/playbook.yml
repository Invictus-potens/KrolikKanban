---
- name: Deploy KrolikKanban
  hosts: all
  become: yes
  vars:
    app_name: krolikkanban
    app_user: krolikkanban
    app_dir: /var/www/krolikkanban
    docker_compose_version: "2.20.0"
    
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Install required packages
      apt:
        name:
          - curl
          - git
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
      when: ansible_os_family == "Debian"

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
      when: ansible_os_family == "Debian"

    - name: Create application user
      user:
        name: "{{ app_user }}"
        system: yes
        shell: /bin/bash
        home: "/home/{{ app_user }}"
        createhome: yes

    - name: Add user to docker group
      user:
        name: "{{ app_user }}"
        groups: docker
        append: yes

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Copy application files
      copy:
        src: "{{ item }}"
        dest: "{{ app_dir }}/"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
      with_items:
        - Dockerfile
        - docker-compose.yml
        - nginx.conf
        - package.json
        - next.config.ts
        - tsconfig.json
        - tailwind.config.js
        - postcss.config.mjs
        - eslint.config.mjs

    - name: Copy application source
      synchronize:
        src: "{{ playbook_dir }}/../app/"
        dest: "{{ app_dir }}/app/"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        recursive: yes

    - name: Copy components
      synchronize:
        src: "{{ playbook_dir }}/../components/"
        dest: "{{ app_dir }}/components/"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        recursive: yes

    - name: Copy lib files
      synchronize:
        src: "{{ playbook_dir }}/../lib/"
        dest: "{{ app_dir }}/lib/"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        recursive: yes

    - name: Create environment file
      template:
        src: env.j2
        dest: "{{ app_dir }}/.env"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0600'

    - name: Create logs directory
      file:
        path: "{{ app_dir }}/logs"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Create SSL directory
      file:
        path: "{{ app_dir }}/ssl"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Start application with Docker Compose
      docker_compose:
        project_src: "{{ app_dir }}"
        state: present
        build: yes
        pull: yes
      become_user: "{{ app_user }}"

    - name: Enable and start Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Create systemd service for Docker Compose
      template:
        src: krolikkanban.service.j2
        dest: /etc/systemd/system/krolikkanban.service
        mode: '0644'

    - name: Enable and start KrolikKanban service
      systemd:
        name: krolikkanban
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Setup firewall
      ufw:
        rule: allow
        port: '80'
        proto: tcp
        state: enabled

    - name: Setup firewall for HTTPS
      ufw:
        rule: allow
        port: '443'
        proto: tcp
        state: enabled

    - name: Enable UFW
      ufw:
        state: enabled
        policy: deny

    - name: Show application status
      command: docker-compose ps
      register: app_status
      changed_when: false
      become_user: "{{ app_user }}"
      args:
        chdir: "{{ app_dir }}"

    - name: Display application status
      debug:
        var: app_status.stdout_lines