version: '3.8'

services:
  app:
    image: krolikkanban:latest
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - NEXT_TELEMETRY_DISABLED=1
    networks:
      - krolikkanban-network
    secrets:
      - supabase_url
      - supabase_anon_key
    configs:
      - source: nginx_config
        target: /etc/nginx/nginx.conf

  nginx:
    image: nginx:alpine
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx_logs:/var/log/nginx
      - ssl_certs:/etc/nginx/ssl
    networks:
      - krolikkanban-network
    configs:
      - source: nginx_config
        target: /etc/nginx/nginx.conf
    depends_on:
      - app

  postgres:
    image: postgres:15-alpine
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
    environment:
      POSTGRES_DB: krolikkanban
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabaseSchema.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - krolikkanban-network
    secrets:
      - postgres_password

  redis:
    image: redis:7-alpine
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
    volumes:
      - redis_data:/data
    networks:
      - krolikkanban-network
    command: redis-server --appendonly yes

networks:
  krolikkanban-network:
    driver: overlay
    attachable: true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  ssl_certs:
    driver: local

secrets:
  supabase_url:
    external: true
  supabase_anon_key:
    external: true
  postgres_password:
    external: true

configs:
  nginx_config:
    file: ./nginx.conf